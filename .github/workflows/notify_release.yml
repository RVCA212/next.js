# A workflow runs when a release is published, dispatches a new event to the vercel/turbo
# to notify its release. Turbopack, and other integration workflow will subscribe to this event.
name: Notify new Next.js release
on:
  release:
    types: [published]
  push:
    branches:
      - sebbie/06-01-automatically_trigger_sync_with_vercel.com_on_release
jobs:
  notify:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    steps:
      - uses: actions/github-script@v7
        id: notify-new-release
        with:
          result-encoding: string
          retries: 3
          retry-exempt-status-codes: 400,401
          # Default github token cannot dispatch events to the remote repo, it should be
          # a PAT with access to contenst:read&write + metadata:read.
          github-token: ${{ secrets.TURBOPACK_TEST_TOKEN }}
          # Note `event_type` and `client_payload` are contract between vercel/turbo,
          # if these need to be changed both side should be updated accordingly.
          script: |
            github.request('POST /repos/{owner}/{repo}/dispatches', {
              owner: 'vercel',
              repo: 'turbo',
              event_type: 'nextjs-release-published',
              client_payload: {
                version: context.ref
              }
            })
  front-sync:
    runs-on: ubuntu-latest
    steps:
      - id: nextPackageInfo
        name: Get `next` package info
        run: echo "value=$(pnpm list next --json --filter next)" >> "$GITHUB_OUTPUT"
      - id: version
        name: Extract `next` version
        run: echo 'value="${{ fromJson(steps.nextPackageInfo.outputs)[0].version }}"' >> "$GITHUB_OUTPUT"
      - run: echo ${{ steps.version.outputs.version }}
      # - uses: actions/github-script@v7
      #   id: trigger-front-sync
      #   with:
      #     result-encoding: string
      #     retries: 3
      #     retry-exempt-status-codes: 400,401
      #     # Default github token cannot dispatch events to the remote repo, it should be
      #     # a PAT with access to contenst:read&write + metadata:read.
      #     github-token: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}
      #     # Note `event_type` and `client_payload` are contract between vercel/front,
      #     # if these need to be changed both side should be updated accordingly.
      #     script: |
      #       github.request('POST /repos/{owner}/{repo}/dispatches', {
      #         owner: 'vercel',
      #         repo: 'front',
      #         event_type: 'cron-update-next',
      #         client_payload: {
      #           version: ${{ steps.version.outputs.version }}
      #         }
      #       })
